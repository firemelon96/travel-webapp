// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id      String      @id @default(cuid())
  email   String   @unique
  name    String?
  password String?
  image   String?
  emailVerified DateTime?
  role    UserRole     @default(USER)
  tours   Tour[]
  accounts Account[]
  bookings Booking[]
}

model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

// TODO: Add reset password token

model Tour {
  id         String        @id @default(cuid())
  title      String
  isFeatured Boolean
  type    TourType  @default(DAY)
  address String
  prices  TourPricing[]
  privatePrice  Int[]
  description String
  iteneraries Itenerary[]
  published  Boolean    @default(false)
  inclusions  String[]
  exclusions  String[]
  notes     String[]
  reminders String[]
  images  String[]
  minPax  Int?
  maxPax  Int?
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]
  bookings Booking[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

}

model TourPricing {
  id          String        @id @default(cuid())
  tourId      String
  pricingType PricingType  @default(JOINER)   // "private" or "joiner"
  minGroupSize Int
  maxGroupSize Int
  price       Float
  tour        Tour       @relation(fields: [tourId], references: [id],onDelete: Cascade)

  @@unique([tourId])
}

enum PricingType {
  PRIVATE
  JOINER
}

//create a booking table that connect the tour to the user
model Booking {
  id      String @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  tour           Tour         @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId         String
  startDate      DateTime     
  endDate        DateTime?     
  participants   Int
  totalPrice     Int
  status         BookingStatus @default(PENDING)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("Bookings")
}

model Itenerary {
  id      String @id @default(cuid())
  title   String
  activities  String[]
  destinations  String[]
  tour  Tour  @relation(fields: [tourId], references: [id])
  tourId    String

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("Iteneraries")
}

model Category {
  id    String    @id @default(cuid())
  name  String
  tours Tour[]
}

enum UserRole {
  USER
  ADMIN
}

enum TourType {
  PACKAGE
  DAY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}